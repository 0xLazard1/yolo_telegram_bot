from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
)
from services.image_processor import ImageProcessor
from config import Config
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramImageBot:
    """Classe principale du bot Telegram"""

    def __init__(self, config: Config):
        self.config = config
        self.image_processor = ImageProcessor()
        self.app = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler pour la commande /start"""
        welcome_message = (
            "üë• Bot de d√©tection de personnes avec IA\n\n"
            "Envoyez-moi une photo et je compterai le nombre de personnes !\n\n"
            "Commandes disponibles :\n"
            "/start - Afficher ce message\n"
            "/help - Aide d√©taill√©e\n"
            "/stop - Arr√™ter le bot\n\n"
            "üí° Envoyez simplement une photo pour commencer !"
        )
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler pour la commande /help"""
        help_message = (
            "‚ÑπÔ∏è Aide - Bot de d√©tection de personnes\n\n"
            "Ce bot utilise l'intelligence artificielle (YOLOv8) pour d√©tecter et compter "
            "les personnes dans vos photos.\n\n"
            "üì∏ Comment utiliser :\n"
            "1. Envoyez une photo\n"
            "2. Le bot analyse l'image\n"
            "3. Vous recevez l'image annot√©e avec :\n"
            "   ‚Ä¢ Des bo√Ætes rouges autour de chaque personne\n"
            "   ‚Ä¢ Le nombre de personnes d√©tect√©es\n"
            "   ‚Ä¢ Le score de confiance\n\n"
            "‚öôÔ∏è Commandes :\n"
            "/start - Message de bienvenue\n"
            "/help - Cette aide\n"
            "/stop - Arr√™ter le bot\n\n"
            "üí° Astuce : Envoyez des photos avec une bonne qualit√© pour de meilleurs r√©sultats !"
        )
        await update.message.reply_text(help_message)

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler pour la commande /stop"""
        await update.message.reply_text(
            "üëã Au revoir !\n\n"
            "Le bot s'arr√™te. Merci d'avoir utilis√© ce service !\n\n"
            "Pour le relancer, l'administrateur devra le red√©marrer manuellement."
        )
        logger.info(f"Commande /stop re√ßue de {update.effective_user.username}")
        # Arr√™te l'application
        self.app.stop_running()

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler pour les photos re√ßues"""
        try:
            await update.message.reply_text("‚è≥ D√©tection en cours...")

            # R√©cup√©ration de la photo (meilleure r√©solution)
            photo = await update.message.photo[-1].get_file()
            photo_bytes = await photo.download_as_bytearray()

            logger.info(
                f"Photo re√ßue de {update.effective_user.username}, taille: {len(photo_bytes)} bytes"
            )

            # Traitement de l'image (d√©tection de personnes)
            result_bytes, description, stats = self.image_processor.process_image(
                bytes(photo_bytes)
            )

            # Envoi du r√©sultat
            await update.message.reply_photo(
                photo=result_bytes, caption=f"‚úÖ {description}"
            )

            logger.info(f"D√©tection termin√©e pour {update.effective_user.username}: {stats['count']} personne(s)")

        except Exception as e:
            logger.error(f"Erreur lors du traitement: {str(e)}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå Erreur lors du traitement de l'image: {str(e)}"
            )

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler pour les images envoy√©es en tant que fichiers"""
        await update.message.reply_text(
            "‚ö†Ô∏è Veuillez envoyer l'image en tant que photo, pas en tant que fichier."
        )

    def setup_handlers(self):
        """Configure tous les handlers du bot"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("stop", self.stop_command))
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.app.add_handler(
            MessageHandler(filters.Document.IMAGE, self.handle_document)
        )

    async def post_init(self, application):
        """Configure le menu de commandes Telegram"""
        commands = [
            ("start", "Afficher le message de bienvenue"),
            ("help", "Obtenir de l'aide sur l'utilisation du bot"),
            ("stop", "Arr√™ter le bot"),
        ]
        await application.bot.set_my_commands(commands)
        logger.info("Menu de commandes configur√©")

    def run(self):
        """Lance le bot"""
        logger.info("D√©marrage du bot...")

        # Cr√©ation de l'application
        self.app = Application.builder().token(self.config.TELEGRAM_TOKEN).post_init(self.post_init).build()

        # Configuration des handlers
        self.setup_handlers()

        # Lancement
        logger.info("Bot en ligne et pr√™t √† recevoir des messages")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)
